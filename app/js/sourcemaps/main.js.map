{"version":3,"sources":["_global.js","advanced-options/breakWords.js","advanced-options/change-category.js","advanced-options/fontBlur.js","advanced-options/horizontalAlign.js","advanced-options/offsetOptions.js","advanced-options/verticalAlign.js","basic-options/download.js","basic-options/font-settings.js","basic-options/multilineText.js","basic-options/resolution.js","basic-options/sign-text.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"../main.js","sourcesContent":["\"use strict\";\n\nconst textOnSignEl = document.getElementById(\"text-on-sign\");\nconst inputSignTextEl = document.getElementById(\"sign-text\");\nconst fontSizeInputEl = document.getElementById(\"fontSize\");\nconst offsetOptionsEls = document.getElementsByClassName(\"offsetOptions\");","const breakWordsEl = document.getElementById(\"breakWords\");\nbreakWordsEl.addEventListener(\"change\",function(){\n    if(this.checked){\n        textOnSignEl.style.wordBreak = \"break-all\";\n    }else{\n        textOnSignEl.style.wordBreak = \"unset\";\n    }\n})","const choosePanelEl = document.getElementsByClassName(\"options__btn--settings\");\nlet selectedPanel = 0;\nconst advFormEl = document.getElementsByClassName(\"advanced-options\");\n\nfor (let i = 0; i < 3; i++) {\n    choosePanelEl[i].addEventListener(\"click\", () => {\n        if (i !== selectedPanel) {\n            choosePanelEl[selectedPanel]\n                .classList\n                .remove(\"options__btn--settings-active\");\n            choosePanelEl[i]\n                .classList\n                .add(\"options__btn--settings-active\");\n\n            advFormEl[selectedPanel]\n                .classList\n                .add(\"display-none\");\n            advFormEl[i]\n                .classList\n                .remove(\"display-none\");\n\n            selectedPanel = i;\n        }\n    });\n}","const fontBlurEl = document.getElementById(\"fontBlur\");\nfontBlurEl.addEventListener(\"input\",function(){\n    textOnSignEl.style.filter = `blur(${fontBlurEl.value}px)`;\n})","let handlehorizontalAlign = () => {\n    let horizontalAlignEl = document.querySelectorAll(\"#horizontalAlign span\");\n    let horizontalAlignActive = 1; // which one is currently active\n    for (let i = 0, il = horizontalAlignEl.length; i < il; i++) {\n        horizontalAlignEl[i]\n            .addEventListener(\"click\", function () {\n                if (!this.classList.contains(\"options__select--active\")) {\n                    this\n                        .classList\n                        .add(\"options__select--active\");\n                    textOnSignEl.style.textAlign = this.dataset.horizontalalign;\n                    horizontalAlignEl[horizontalAlignActive]\n                        .classList\n                        .remove(\"options__select--active\");\n                    horizontalAlignActive = i\n                }\n\n            })\n    }\n}\nhandlehorizontalAlign();","function handleOffsets() {\n    let offsets = \"\"\n    for (let i = 0; i < 4; i++) {\n        offsets += offsetOptionsEls[i].value === \"\"\n            ? \"0 \"\n            : offsetOptionsEls[i].value + \"px \"\n    }\n    textOnSignEl.style.padding = offsets\n}\nfor (let i = 0; i < 4; i++) {\n    offsetOptionsEls[i].addEventListener(\"input\", handleOffsets);\n}","let handleVerticalAlign = () => {\n    let verticalAlignEl = document.querySelectorAll(\"#verticalAlign span\");\n    let verticalAlignActive = 1; // which one is currently active\n    for (let i = 0, il = verticalAlignEl.length; i < il; i++) {\n        verticalAlignEl[i]\n            .addEventListener(\"click\", function () {\n                if (!this.classList.contains(\"options__select--active\")) {\n                    this\n                        .classList\n                        .add(\"options__select--active\");\n                    console.dir(this)\n                    textOnSignEl.style.alignItems = this.dataset.verticalalign;\n                    verticalAlignEl[verticalAlignActive]\n                        .classList\n                        .remove(\"options__select--active\");\n                    verticalAlignActive = i\n                }\n\n            })\n    }\n}\nhandleVerticalAlign();","function capture() {\n    const captureEl = document.querySelector('#capture')\n    html2canvas(captureEl, {\n        scrollY: -window.scrollY,\n        backgroundColor: null\n    }).then(canvas => {\n        document\n            .body\n            .appendChild(canvas)\n        canvas.style.display = 'none'\n        return canvas;\n    }).then(canvas => {\n        const image = canvas\n            .toDataURL('image/png')\n            .replace('image/png', 'image/octet-stream')\n        const a = document.createElement('a')\n        a.setAttribute('download', 'my-image.png')\n        a.setAttribute('href', image)\n        a.click()\n        canvas.remove()\n    })\n}\n\nconst btn = document.querySelector('#download')\nbtn.addEventListener('click', capture)","let shouldAdjustFontSize = true;\nfontSizeInputEl.addEventListener(\"input\", function () {\n    if (this.value === \"\") {\n        adjustFontSizePeepo(document.getElementById(\"text-on-sign\"), inputSignTextEl.value);\n        shouldAdjustFontSize = true;\n    } else {\n        shouldAdjustFontSize = false;\n        document\n            .getElementById(\"text-on-sign\")\n            .style\n            .fontSize = this.value + \"px\"\n    }\n})\nconst observeSignChanges = new MutationObserver(function(){\n    fontSizeInputEl.placeholder = Math.round(window.getComputedStyle(textOnSignEl).fontSize.replace(\"px\",\"\"));\n    shouldAdjustFontSize ? adjustFontSizePeepo(textOnSignEl,textOnSignEl.textContent):null;\n})\nobserveSignChanges.observe(textOnSignEl,{childList:true,attributes:true, characterData: true,subtree:true})\nadjustFontSizePeepo(textOnSignEl, \"\")\n\nfunction adjustFontSizePeepo(el, text) {\n\n    let isDesktop = window.screen.width >= 1024\n        ? true\n        : false;\n    if (isDesktop) {\n        if (text.length <= 6) {\n            el.style.fontSize = \"7vw\";\n        } else if (text.length <= 19) {\n            el.style.fontSize = \"6vw\";\n        } else if (text.length >= 20) {\n            el.style.fontSize = \"3.5vw\";\n        }\n    } else {\n        if (text.length <= 7) {\n            el.style.fontSize = \"10vw\";\n        } else if (text.length <= 15) {\n            el.style.fontSize = \"6vw\";\n        } else if (text.length >= 16) {\n            el.style.fontSize = \"4vw\";\n        }\n    }\n}\n","document.getElementById(\"multiline\").addEventListener(\"input\", () => {\n    if(document.getElementById(\"multiline\").checked){\n        textOnSignEl.style.whiteSpace = \"normal\";\n    }\n    else{\n        textOnSignEl.style.whiteSpace = \"nowrap\";\n    }\n})","let resolutionWidthEl = document.getElementById(\"resolutionWidth\")\nlet resolutionHeightEl = document.getElementById(\"resolutionHeight\")\nlet proportion = 508/469;\nfunction setMaxImageWidth(){\n    if(resolutionWidthEl.value > document.getElementById(\"frogSection\").offsetWidth){\n        resolutionWidthEl.value = document.getElementById(\"frogSection\").offsetWidth;\n    }\n}\nfunction removeMinusNumbers(){\n    if(resolutionWidthEl.value.includes(\"-\")){\n        resolutionWidthEl.value = resolutionWidthEl.value.replace(\"-\",\"\");\n    }\n    if(resolutionHeightEl.value.includes(\"-\")){\n        resolutionHeightEl.value = resolutionHeightEl.value.replace(\"-\",\"\");\n    }\n}\nfunction setMaxImageHeight(){\n    if(resolutionHeightEl.value > Math.round(proportion * +document.getElementById(\"frogSection\").offsetWidth)){\n        resolutionHeightEl.value = Math.round(proportion * +document.getElementById(\"frogSection\").offsetWidth);\n    }\n}\nfunction handleEmptyAxis(){\n    if(resolutionHeightEl.value === \"\"){\n        document.getElementById(\"frogImage\").style.height = resolutionWidthEl.value * proportion  +\"px\";\n        resolutionHeightEl.placeholder = Math.round(resolutionWidthEl.value * proportion);\n    }\n    if(resolutionWidthEl.value === \"\"){\n        document.getElementById(\"frogImage\").style.width = resolutionHeightEl.value / proportion  +\"px\";\n        resolutionWidthEl.placeholder = Math.round(resolutionHeightEl.value / proportion);\n    }\n}\nresolutionHeightEl.addEventListener(\"input\",function(){\n    removeMinusNumbers()\n    setMaxImageHeight();\n    document.getElementById(\"frogImage\").style.height = this.value +\"px\";\n    handleEmptyAxis()\n})\nresolutionWidthEl.addEventListener(\"input\",function(){\n    console.log(\"yea\")\n    removeMinusNumbers();\n    setMaxImageWidth();\n    document.getElementById(\"frogImage\").style.width = this.value +\"px\";\n    handleEmptyAxis()\n})\n","inputSignTextEl.addEventListener(\"input\", function (el) {\n    document.getElementById(\"text-on-sign\").textContent = el.target.value;\n});\n\ntextOnSignEl.addEventListener(\"input\", function (el) {\n    addBrIfEmpty(el.target,el.target.textContent)\n    document.getElementById(\"sign-text\").value = document.getElementById(\"text-on-sign\").textContent;\n})\nfunction addBrIfEmpty(el,text){\n    if(text === \"\"){\n        el.appendChild(document.createElement(\"br\"))\n    }\n}\n\n\n\n// function smallRandomNumber(){     return +(Math.random()*0.2).toFixed(2) }\n// function animationRandomizer(el){     animationCount = 20000 /*\n// Math.round((Math.random()+1)*3) */     console.log(animationCount)\n// el.style.animationIterationCount = `1, ${animationCount},1`\n// el.style.animationTimingFunction= `ease, cubic-bezier(${.25 +\n// smallRandomNumber()}, ${.1 + smallRandomNumber()}, ${.25 +\n// smallRandomNumber()}, ${1 + smallRandomNumber()})` jumpingAnimationDuration =\n// (Math.random()+0.5*1.2).toFixed(2) el.style.animationDuration =\n// `1s,${jumpingAnimationDuration}s,1s` el.style.animationDelay = `0s, 1s,\n// ${(jumpingAnimationDuration*animationCount)+1}s` } .peepo {     position:\n// absolute;     bottom: 0;     display: flex;     justify-content: center;\n// animation-name: entering, jumping, leaving; } .peepo--image {     width:\n// 350px; } .peepo--text {     font-family: 'Roboto Mono', monospace;\n// line-height: 1.2em;     max-width: 300px;     position: absolute; padding:\n// 10%;     padding-top: 20%;     padding-bottom: 0;     max-height: 26%;\n// text-align: center;     transform: rotate(7deg);     overflow: hidden;\n// word-wrap: break-word;     text-overflow: ellipsis; } @keyframes leaving{ to{\n//         transform: translateY(100%);     } } @keyframes entering {     0% {\n//     transform: translateY(100%);     }     100% {     transform:\n// translateY(0%);     } } @keyframes jumping {     50% { transform:\n// translateY(-10%);     }     100% {         transform: translateY(0%);     } }"]}