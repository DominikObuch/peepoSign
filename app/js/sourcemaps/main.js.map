{"version":3,"sources":["options.js","advanced-options/breakWords.js","advanced-options/changeCategory.js","advanced-options/fontBlur.js","advanced-options/horizontalAlign.js","advanced-options/offsetOptions.js","advanced-options/setToDefault.js","advanced-options/verticalAlign.js","basic-options/download.js","basic-options/emptySign.js","basic-options/fontSize.js","basic-options/multilineText.js","basic-options/resolution.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"../main.js","sourcesContent":["let options = {\n    //basic options variables\n    signText: '',\n    selectedPanel: {\n        old: 0,\n        current: 0\n    },\n    multilineText: true,\n    width: '',\n    height: '',\n    //first panel of adv options variables\n    fontSize: '',\n    breakWords: false,\n    verticalAlign: 'center',\n    horizontalAlign: 'center',\n    offset: '',\n    fontBlur: '1',\n    fontFamily: '',\n    backgroundColor: null\n}\nconst elements = {\n    textOnSignEl: document.getElementById('text-on-sign'),\n    frogImageEl: document.getElementById(\"frogImage\"),\n    inputSignTextEl: document.getElementById('signText'),\n    fontSizeInputEl: document.getElementById('fontSize'),\n    offsetOptionsEls: document.getElementsByClassName('offsetOptions'),\n    choosePanelEl: document.getElementsByClassName('options__btn--settings'),\n    advFormEl: document.getElementsByClassName('advanced-options'),\n    fontBlurEl: document.getElementById('fontBlur'),\n    horizontalAlignEls: document.querySelectorAll('#horizontalAlign span'),\n    verticalAlignEls: document.querySelectorAll('#verticalAlign span'),\n    setToDefaultEl: document.getElementById('setToDefault'),\n    resolutionWidthEl: document.getElementById(\"resolutionWidth\"),\n    resolutionHeightEl: document.getElementById(\"resolutionHeight\")\n}","function checkBreakWords(el) {\n    options.breakWords = el.target.checked\n        ? true\n        : false;\n}\nfunction updateBreakWords() {\n    elements.textOnSignEl.style.wordBreak = options.breakWords\n        ? \"break-all\"\n        : \"unset\";\n\n}\ndocument\n    .getElementById(\"breakWords\")\n    .addEventListener(\"change\", function (el) {\n        checkBreakWords(el);\n        updateBreakWords();\n    });","function updateCategory() {\n    elements\n        .choosePanelEl[options.selectedPanel.old]\n        .classList\n        .remove(\"options__btn--settings-active\");\n\n    elements\n        .choosePanelEl[options.selectedPanel.current]\n        .classList\n        .add(\"options__btn--settings-active\");\n\n    elements.advFormEl[options.selectedPanel.old]\n        .classList\n        .add(\"display-none\");\n    elements.advFormEl[options.selectedPanel.current]\n        .classList\n        .remove(\"display-none\");\n}\nfunction checkCategory(i) {\n    options.selectedPanel.old = options.selectedPanel.current;\n    options.selectedPanel.current = i;\n\n}\nfor (let i = 0; i < 3; i++) {\n    elements\n        .choosePanelEl[i]\n        .addEventListener(\"click\", function () {\n            checkCategory(i);\n            updateCategory();\n        });\n}","elements\n    .fontBlurEl\n    .addEventListener(\"input\", function () {\n        checkFontBlur();\n        updateFontBlur();\n        updateInputBlur();\n    })\n\nfunction updateFontBlur() {\n    elements.textOnSignEl.style.filter = `blur(${options.fontBlur}px)`;\n}\nfunction checkFontBlur() {\n    options.fontBlur = elements.fontBlurEl.value\n    if (options.fontBlur < 0) {\n        options.fontBlur = 0\n    } else if (options.fontBlur > 99) {\n        options.fontBlur = 99\n    } else if (options.fontBlur == \"\") {\n        options.fontBlur = 0\n    }\n}\nfunction updateInputBlur() {\n    elements.fontBlurEl.value = parseFloat(options.fontBlur)\n}","for (let i = 0; i <= 2; i++) {\n    elements\n        .horizontalAlignEls[i]\n        .addEventListener(\"click\", function (el) {\n            checkHorizontalAlign(el);\n            updateHorizontalAlign();\n        })\n}\n\nfunction updateHorizontalAlign() {\n    let currentActive = null;\n    for (let i = 0; i <= 2; i++) {\n        elements\n            .horizontalAlignEls[i]\n            .classList\n            .contains(\"options__select--active\")\n            ? elements\n                .horizontalAlignEls[i]\n                .classList\n                .remove(\"options__select--active\")\n            : null;\n        if (elements.horizontalAlignEls[i].dataset.horizontalalign === options.horizontalAlign) {\n            currentActive = i\n        }\n\n    }\n    elements\n        .horizontalAlignEls[currentActive]\n        .classList\n        .add(\"options__select--active\");\n        elements.textOnSignEl.style.textAlign = options.horizontalAlign\n\n}\n\nfunction checkHorizontalAlign(el) {\n    options.horizontalAlign = el.target.dataset.horizontalalign;\n}","function handleOffsets() {\n    let offsets = \"\"\n    for (let i = 0; i < 4; i++) {\n        offsets += offsetOptionsEls[i].value === \"\"\n            ? \"0 \"\n            : offsetOptionsEls[i].value + \"px \"\n    }\n    textOnSignEl.style.padding = offsets\n}\nfor (let i = 0; i < 4; i++) {\n    elements.offsetOptionsEls[i].addEventListener(\"input\", handleOffsets);\n}\nfunction checkOffsets(){\n    let offsets = \"\";\n    for (let i = 0; i < 4; i++) {\n        offsets += elements.offsetOptionsEls[i].value === \"\"\n            ? \"0 \"\n            : offsetOptionsEls[i].value + \"px \"\n    }\n    options.offset = offsets;\n}\nfunction updateOffsets(){\n    textOnSignEl.style.padding = options.offset\n}","function setToDefaultOptions(){\n    options.multilineText = true;\n    options.fontSize = '';\n    options.breakWords = true;\n    options.verticalAlign = 'center';\n    options.horizontalAlign= 'center';\n    options.offset = '';\n    options.fontBlur = '';\n    options.fontBlur = '';\n    options.width = '';\n    options.height = '';\n    options.backgroundColor = null;\n}\nelements.setToDefaultEl.addEventListener('click',function(){\n    setToDefaultOptions();\n})","let handleVerticalAlign = () => {\n    let verticalAlignEl = document.querySelectorAll(\"#verticalAlign span\");\n    let verticalAlignActive = 1; // which one is currently active\n    for (let i = 0, il = verticalAlignEl.length; i < il; i++) {\n        verticalAlignEl[i]\n            .addEventListener(\"click\", function () {\n                if (!this.classList.contains(\"options__select--active\")) {\n                    this\n                        .classList\n                        .add(\"options__select--active\");\n                    textOnSignEl.style.alignItems = this.dataset.verticalalign;\n                    verticalAlignEl[verticalAlignActive]\n                        .classList\n                        .remove(\"options__select--active\");\n                    verticalAlignActive = i\n                }\n\n            })\n    }\n}\nhandleVerticalAlign();\n\n\n\nfor (let i = 0; i <= 2; i++) {\n    elements\n        .verticalAlignEls[i]\n        .addEventListener(\"click\", function (el) {\n            checkVerticalAlign(el);\n            updateVerticalAlign();\n        })\n}\n\nfunction updateVerticalAlign() {\n    let currentActive = null;\n    for (let i = 0; i <= 2; i++) {\n        elements\n            .verticalAlignEls[i]\n            .classList\n            .contains(\"options__select--active\")\n            ? elements\n                .verticalAlignEls[i]\n                .classList\n                .remove(\"options__select--active\")\n            : null;\n        if (elements.verticalAlignEls[i].dataset.verticalalign === options.verticalAlign) {\n            currentActive = i\n        }\n\n    }\n    elements\n        .verticalAlignEls[currentActive]\n        .classList\n        .add(\"options__select--active\");\n        elements.textOnSignEl.style.alignItems = options.verticalAlign\n\n}\n\nfunction checkVerticalAlign(el) {\n    options.verticalAlign = el.target.dataset.verticalalign;\n}","function capture() {\n    const captureEl = document.querySelector('#capture')\n    html2canvas(captureEl, {\n        scrollY: -window.scrollY,\n        backgroundColor: options.backgroundColor\n    }).then(canvas => {\n        document\n            .body\n            .appendChild(canvas)\n        canvas.style.display = 'none'\n        return canvas;\n    }).then(canvas => {\n        const image = canvas\n            .toDataURL('image/png')\n            .replace('image/png', 'image/octet-stream')\n        const a = document.createElement('a')\n        a.setAttribute('download', 'peepoSign.png')\n        a.setAttribute('href', image)\n        a.click()\n        canvas.remove()\n    })\n}\n\nconst btn = document.querySelector('#download')\nbtn.addEventListener('click', capture)","elements.inputSignTextEl.addEventListener(\"input\", function (el) {\n    options.signText = el.target.value;\n    elements.textOnSignEl.textContent = options.signText;\n    addBrIfEmpty(elements.textOnSignEl,elements.textOnSignEl.textContent);\n});\nelements.textOnSignEl.addEventListener(\"input\", function () {\n    options.signText = elements.textOnSignEl.textContent;\n    document.getElementById(\"signText\").value = options.signText;\n    addBrIfEmpty(elements.textOnSignEl,elements.textOnSignEl.textContent);\n})\nfunction addBrIfEmpty(el,text){\n    if(text === \"\"){\n        el.appendChild(document.createElement(\"br\"))\n    }\n}\n\n","let shouldAdjustFontSize = true;\nfontSizeInputEl.addEventListener(\"input\", function () {\n    if (this.value === \"\") {\n        adjustFontSizePeepo();\n        updateFontSize();\n        shouldAdjustFontSize = true;\n    } else {\n        shouldAdjustFontSize = false;\n        options.fontSize = this.value + \"px\";\n        updateFontSize();\n    }\n})\nconst observeSignChanges = new MutationObserver(function () {\n    fontSizeInputEl.placeholder = Math.round(window.getComputedStyle(textOnSignEl).fontSize.replace(\"px\", \"\"));\n    if (shouldAdjustFontSize) {\n        adjustFontSizePeepo();\n        updateFontSize();\n    }\n})\nobserveSignChanges.observe(textOnSignEl, {\n    childList: true,\n    attributes: true,\n    characterData: true,\n    subtree: true\n})\n\nfunction adjustFontSizePeepo() {\n\n    let isDesktop = window.matchMedia('(min-width: 1024px)')\n    if (isDesktop) {\n        if (options.signText.length <= 6) {\n            options.fontSize = \"7vw\";\n        } else if (options.signText.length <= 19) {\n            options.fontSize = \"6vw\";\n        } else if (options.signText.length >= 20) {\n            options.fontSize = \"3.5vw\";\n        }\n    } else {\n        if (options.signText.length <= 7) {\n            options.fontSize.fontSize = \"10vw\";\n        } else if (options.signText.length <= 15) {\n            options.fontSize = \"6vw\";\n        } else if (options.signText.length >= 16) {\n            options.fontSize = \"4vw\";\n        }\n    }\n}\nfunction updateFontSize() {\n    elements.textOnSignEl.style.fontSize = options.fontSize;\n}\n\nadjustFontSizePeepo();\nupdateFontSize();","function checkMultilineText() {\n    if (document.getElementById(\"multiline\").checked) {\n        options.multilineText = \"normal\";\n    } else {\n        options.multilineText = \"nowrap\";\n    }\n}\nfunction updateMultilineText() {\n    textOnSignEl.style.whiteSpace = options.multilineText;\n}\ndocument\n    .getElementById(\"multiline\")\n    .addEventListener(\"input\", function () {\n        checkMultilineText();\n        updateMultilineText();\n    });","\nlet proportion = 508 / 469;\nfunction setMaxImageWidth() {\n    if (options.width > document.getElementById(\"frogSection\").offsetWidth) {\n        options.width = document.getElementById(\"frogSection\").offsetWidth\n    }\n}\nfunction setMaxImageHeight() {\n    if (options.height > Math.round(proportion * + document.getElementById(\"frogSection\").offsetWidth)) {\n        options.height = Math.round(proportion * + document.getElementById(\"frogSection\").offsetWidth);\n    }\n}\nfunction removeMinusAxis() {\n    if (options.width.toString().includes(\"-\")) {\n        options.width = options\n            .width\n            .replace(\"-\", \"\")\n    }\n    if (options.height.toString().includes(\"-\")) {\n        options.height = options\n            .height\n            .replace(\"-\", \"\")\n    }\n}\n\nfunction handleEmptyAxis() {\n    if (options.height === \"\") {\n        elements.frogImageEl.style.height = \"auto\";\n        elements.resolutionHeightEl.placeholder = options.width !== \"\"\n            ? `${Math.round(options.width * proportion)}px`\n            : \"height\"\n    }\n    if (options.width === \"\") {\n        elements.frogImageEl.style.width = \"auto\";\n        elements.resolutionWidthEl.placeholder = options.height !== \"\"\n            ? `${Math.round(options.height / proportion)}px`\n            : \"width\";\n    }\n}\n\nfunction checkWidth() {\n    options.width = elements.resolutionWidthEl.value;\n}\nfunction checkHeight() {\n    options.height = elements.resolutionHeightEl.value;\n}\nfunction updateWidth() {\n    elements.frogImageEl.style.width = options.width + \"px\";\n    elements.resolutionWidthEl.value = options.width;\n\n    elements.frogImageEl.style.height = options.height + \"px\";\n    elements.resolutionHeightEl.value = options.height;\n}\nelements.resolutionHeightEl\n    .addEventListener(\"input\", function () {\n        checkHeight();\n        removeMinusAxis();\n        setMaxImageHeight();\n        handleEmptyAxis();\n        updateWidth();\n    })\nelements.resolutionWidthEl.addEventListener(\"input\", function () {\n    checkWidth();\n    removeMinusAxis();\n    setMaxImageWidth();\n    handleEmptyAxis();\n    updateWidth();\n})"]}